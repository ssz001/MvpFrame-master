package com.ssz.studydemo.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ssz.studydemo.model.bean.CollBookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLL_BOOK_BEAN".
*/
public class CollBookBeanDao extends AbstractDao<CollBookBean, String> {

    public static final String TABLENAME = "COLL_BOOK_BEAN";

    /**
     * Properties of entity CollBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property ShortIntro = new Property(3, String.class, "shortIntro", false, "SHORT_INTRO");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property BookStatus = new Property(5, String.class, "bookStatus", false, "BOOK_STATUS");
        public final static Property Updated = new Property(6, String.class, "updated", false, "UPDATED");
        public final static Property LastRead = new Property(7, String.class, "lastRead", false, "LAST_READ");
        public final static Property ChaptersCount = new Property(8, int.class, "chaptersCount", false, "CHAPTERS_COUNT");
        public final static Property LastChapter = new Property(9, String.class, "lastChapter", false, "LAST_CHAPTER");
        public final static Property IsUpdate = new Property(10, boolean.class, "isUpdate", false, "IS_UPDATE");
        public final static Property IsLocal = new Property(11, boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property BookIdInBiquge = new Property(12, String.class, "bookIdInBiquge", false, "BOOK_ID_IN_BIQUGE");
    }

    private DaoSession daoSession;


    public CollBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLL_BOOK_BEAN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"TITLE\" TEXT," + // 1: title
                "\"AUTHOR\" TEXT," + // 2: author
                "\"SHORT_INTRO\" TEXT," + // 3: shortIntro
                "\"COVER\" TEXT," + // 4: cover
                "\"BOOK_STATUS\" TEXT," + // 5: bookStatus
                "\"UPDATED\" TEXT," + // 6: updated
                "\"LAST_READ\" TEXT," + // 7: lastRead
                "\"CHAPTERS_COUNT\" INTEGER NOT NULL ," + // 8: chaptersCount
                "\"LAST_CHAPTER\" TEXT," + // 9: lastChapter
                "\"IS_UPDATE\" INTEGER NOT NULL ," + // 10: isUpdate
                "\"IS_LOCAL\" INTEGER NOT NULL ," + // 11: isLocal
                "\"BOOK_ID_IN_BIQUGE\" TEXT);"); // 12: bookIdInBiquge
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLL_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollBookBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String shortIntro = entity.getShortIntro();
        if (shortIntro != null) {
            stmt.bindString(4, shortIntro);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String bookStatus = entity.getBookStatus();
        if (bookStatus != null) {
            stmt.bindString(6, bookStatus);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(7, updated);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(8, lastRead);
        }
        stmt.bindLong(9, entity.getChaptersCount());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(10, lastChapter);
        }
        stmt.bindLong(11, entity.getIsUpdate() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsLocal() ? 1L: 0L);
 
        String bookIdInBiquge = entity.getBookIdInBiquge();
        if (bookIdInBiquge != null) {
            stmt.bindString(13, bookIdInBiquge);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollBookBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String shortIntro = entity.getShortIntro();
        if (shortIntro != null) {
            stmt.bindString(4, shortIntro);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String bookStatus = entity.getBookStatus();
        if (bookStatus != null) {
            stmt.bindString(6, bookStatus);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(7, updated);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(8, lastRead);
        }
        stmt.bindLong(9, entity.getChaptersCount());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(10, lastChapter);
        }
        stmt.bindLong(11, entity.getIsUpdate() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsLocal() ? 1L: 0L);
 
        String bookIdInBiquge = entity.getBookIdInBiquge();
        if (bookIdInBiquge != null) {
            stmt.bindString(13, bookIdInBiquge);
        }
    }

    @Override
    protected final void attachEntity(CollBookBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CollBookBean readEntity(Cursor cursor, int offset) {
        CollBookBean entity = new CollBookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortIntro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updated
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastRead
            cursor.getInt(offset + 8), // chaptersCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lastChapter
            cursor.getShort(offset + 10) != 0, // isUpdate
            cursor.getShort(offset + 11) != 0, // isLocal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // bookIdInBiquge
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollBookBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortIntro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdated(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastRead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChaptersCount(cursor.getInt(offset + 8));
        entity.setLastChapter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsUpdate(cursor.getShort(offset + 10) != 0);
        entity.setIsLocal(cursor.getShort(offset + 11) != 0);
        entity.setBookIdInBiquge(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CollBookBean entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(CollBookBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollBookBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
